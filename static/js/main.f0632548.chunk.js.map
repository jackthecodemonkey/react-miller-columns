{"version":3,"sources":["MillerColumns/ColumnMover.js","MillerColumns/MillerColumn.jsx","MillerColumns/Column.jsx","sample/sampleTree.js","sample/model.js","sample/Row.jsx","App.js","serviceWorker.js","index.js"],"names":["ColumnMover","totalWidth","totalChilden","maxColumn","columnMagin","minColumnWidth","peekWidth","this","currentPosition","value","childrenLen","previousPeek","shouldShowPeek","diff","visibleColumns","invisibleColumnWidth","Math","floor","columnDiff","currentPeek","base","abs","offset","visibleColumn","i","minWidth","GetColumns","numberOfColumns","maxColumnsInContainer","margin","total","getStyleFromElement","element","property","Number","window","getComputedStyle","replace","debounce","fn","context","delay","timeout","args","clearTimeout","setTimeout","apply","MillerColumn","props","wrapperRef","React","createRef","innerWrapper","notifyTransition","animationSpeed","previousInvisibleColumns","state","children","nextProps","length","columnMover","Update","ShouldMoveSlider","moveToEnd","moveTo","MoveTo","setState","getChildren","addEventListener","e","UpdateTotalWidth","current","updateChildrenAndMove","transitioning","invisibleColumns","moveToFirst","style","transition","transform","MoveToEnd","Children","map","child","index","baseStyle","width","maxColumnWidth","height","marginRight","cloneElement","peekColumn","peekIndex","column","ref","className","Component","defaultProps","Column","bind","others","childrenStyle","otherChildrenProps","sampleTree","label","SampleTree","tree","parent","Array","isArray","t","selectedChild","find","localSelectedChild","IsNodeInChildren","UnsetSelected","NextNode","FindAndSetSelected","Row","onClick","onRowClick","showBg","background","border","borderRadius","display","fontSize","flexDirection","padding","key","marginTop","App","Model","columns","localIndex","push","getColumn","getColumns","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0632548.chunk.js","sourcesContent":["class ColumnMover {\r\n    constructor(totalWidth, totalChilden, maxColumn, columnMagin, minColumnWidth, peekWidth) {\r\n        this.maxColumn = maxColumn;\r\n        this.columnMagin = columnMagin;\r\n        this.minColumnWidth = minColumnWidth;\r\n        this.peekWidth = peekWidth;\r\n        this.totalWidth = totalWidth;\r\n        this.totalChilden = totalChilden;\r\n        this.currentPosition = 0;\r\n    }\r\n\r\n    UpdateTotalWidth(value) {\r\n        this.totalWidth = value;\r\n    }\r\n\r\n    Update(childrenLen) {\r\n        this.totalChilden = childrenLen;\r\n    }\r\n\r\n    get peekIndex() {\r\n        return this.shouldShowPeek\r\n            ? this.totalChilden - this.visibleColumns - 1\r\n            : -1;\r\n    }\r\n\r\n    get marginRight() {\r\n        return Math.floor(this.columnMagin / 2);\r\n    }\r\n\r\n    get shouldShowPeek() {\r\n        let visibleColumn = this.GetColumns();\r\n        return this.totalChilden > visibleColumn;\r\n    }\r\n\r\n    get visibleColumns() {\r\n        let visibleColumn = this.GetColumns();\r\n        if (this.shouldShowPeek) {\r\n            visibleColumn = this.GetColumns(this.peekWidth);\r\n        }\r\n        return visibleColumn;\r\n    }\r\n\r\n    get invisibleColumnWidth() {\r\n        return this.minColumnWidth;\r\n    }\r\n\r\n    get maxColumnsInContainer() {\r\n        return this.GetColumns(this.shouldShowPeek ? this.peekWidth : 0, this.maxColumn);\r\n    }\r\n\r\n    get maxColumnWidth() {\r\n        let numberOfColumns = this.maxColumnsInContainer;\r\n        let margin = numberOfColumns * Math.floor(this.columnMagin / 2) + Math.floor(this.columnMagin / 2);\r\n        const total = this.shouldShowPeek ? this.totalWidth - this.peekWidth : this.totalWidth;\r\n        return Math.floor((total - margin) / numberOfColumns);\r\n    }\r\n\r\n    get invisibleColumns() {\r\n        if (this.shouldShowPeek) {\r\n            return this.totalChilden - this.visibleColumns;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    ShouldMoveSlider(previousPeek) {\r\n        if (previousPeek !== this.shouldShowPeek) {\r\n            return true;\r\n        }\r\n        return this.totalChilden > this.maxColumn || this.shouldShowPeek\r\n    }\r\n\r\n    MoveToEnd() {\r\n        const diff = this.totalChilden - this.visibleColumns;\r\n        let move = (this.invisibleColumnWidth * diff) + (Math.floor(this.columnMagin / 2) * diff) - this.peekWidth;\r\n        return move;\r\n    }\r\n\r\n    MoveTo(columnDiff, previousPeek) {\r\n        const currentPeek = this.shouldShowPeek;\r\n        if (previousPeek === !currentPeek && this.totalChilden === this.visibleColumns) {\r\n            this.currentPosition = 0;\r\n            return 0;\r\n        }\r\n\r\n        let base = (this.invisibleColumnWidth + Math.floor(this.columnMagin / 2)) * Math.abs(columnDiff);\r\n        if (previousPeek === false && currentPeek) {\r\n            base -= this.peekWidth\r\n        } else if (previousPeek && !currentPeek) {\r\n            base += this.peekWidth\r\n        }\r\n        if (columnDiff > 0) {\r\n            return base;\r\n        } else {\r\n            return -base;\r\n        }\r\n    }\r\n\r\n    GetColumns(offset = 0, totalChilden = this.totalChilden) {\r\n        let visibleColumn = 1;\r\n        for (let i = 1; i < totalChilden + 1; i++) {\r\n            let minWidth = (this.minColumnWidth * i) + (Math.floor(this.columnMagin / 2) * i);\r\n            minWidth += Math.floor(this.columnMagin / 2);\r\n            if (minWidth > (this.totalWidth - offset) || this.maxColumn + 1 === i) {\r\n                break;\r\n            }\r\n            visibleColumn = i;\r\n        }\r\n        return visibleColumn;\r\n    }\r\n}\r\n\r\nexport default ColumnMover;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ColumnMover from './ColumnMover';\r\nimport './index.css';\r\n\r\nconst getStyleFromElement = (element, property) => {\r\n    return element && property && Number(window.getComputedStyle(element)[property].replace('px', ''));\r\n}\r\n\r\nconst debounce = (fn, context = null, delay) => {\r\n    let timeout = null;\r\n    return (...args) => {\r\n        if (timeout) clearTimeout(timeout);\r\n        timeout = setTimeout(() => {\r\n            fn.apply(context, args);\r\n        }, delay);\r\n    }\r\n}\r\n\r\nclass MillerColumn extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.wrapperRef = React.createRef();\r\n        this.innerWrapper = React.createRef();\r\n        this.notifyTransition = debounce(this.notifyTransition, this, this.props.animationSpeed);\r\n        this.previousInvisibleColumns = null;\r\n        this.state = {\r\n            children: null,\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        const diff = nextProps.children.length - this.props.children.length;\r\n        if (nextProps.children.length !== this.props.children.length) {\r\n            const previousPeek = this.columnMover.shouldShowPeek;\r\n            this.columnMover.Update(nextProps.children.length);\r\n            const ShouldMoveSlider = this.columnMover.ShouldMoveSlider(previousPeek);\r\n            if ((!previousPeek && ShouldMoveSlider) || (diff > 1)) {\r\n                this.moveToEnd();\r\n            } else if (ShouldMoveSlider) {\r\n                const moveTo = this.columnMover.MoveTo(diff, previousPeek);\r\n                this.moveTo(`translateX(-${this.columnMover.currentPosition + moveTo}px)`);\r\n                this.columnMover.currentPosition = this.columnMover.currentPosition + moveTo;\r\n            }\r\n        }\r\n        this.setState({\r\n            children: this.getChildren(\r\n                nextProps,\r\n                diff !== 0\r\n            ),\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('resize', (e) => {\r\n            if (this.columnMover) {\r\n                this.columnMover.UpdateTotalWidth(getStyleFromElement(this.wrapperRef.current, 'width'));\r\n                this.updateChildrenAndMove(true);\r\n            }\r\n        })\r\n        const { maxColumn, columnMagin, minColumnWidth, peekWidth, children } = this.props;\r\n        const totalWidth = getStyleFromElement(this.wrapperRef.current, 'width');\r\n        this.columnMover = new ColumnMover(totalWidth, children.length, maxColumn, columnMagin, minColumnWidth, peekWidth)\r\n        this.updateChildrenAndMove();\r\n    }\r\n\r\n    updateChildrenAndMove(transitioning = false) {\r\n        this.setState({\r\n            children: this.getChildren(this.props, transitioning),\r\n        }, () => {\r\n            if (this.columnMover.shouldShowPeek) {\r\n                if (this.previousInvisibleColumns !== this.columnMover.invisibleColumns) {\r\n                    this.moveToEnd();\r\n                } else this.notifyTransition();\r\n            }\r\n            else this.moveToFirst();\r\n            this.previousInvisibleColumns = this.columnMover.invisibleColumns;\r\n        })\r\n    }\r\n\r\n    moveTo(value) {\r\n        if (this.innerWrapper.current) this.innerWrapper.current.style.transition = `transform ${this.props.animationSpeed}ms ease`;\r\n        if (this.innerWrapper.current) this.innerWrapper.current.style.transform = value;\r\n        this.notifyTransition();\r\n    }\r\n\r\n    moveToFirst() {\r\n        this.moveTo(`translateX(0px)`);\r\n        this.columnMover.currentPosition = 0;\r\n    }\r\n\r\n    moveToEnd() {\r\n        const moveTo = this.columnMover.MoveToEnd();\r\n        this.moveTo(`translateX(-${moveTo}px)`);\r\n        this.columnMover.currentPosition = moveTo;\r\n    }\r\n\r\n    notifyTransition() {\r\n        this.setState({\r\n            children: this.getChildren(this.props, false),\r\n        })\r\n    }\r\n\r\n    getChildren(props = this.props, transitioning = false) {\r\n        return React.Children.map(props.children, (child, index) => {\r\n\r\n            const width = this.columnMover.invisibleColumns\r\n                ? index < this.columnMover.invisibleColumns\r\n                    ? this.columnMover.invisibleColumnWidth\r\n                    : this.columnMover.maxColumnWidth\r\n                : this.columnMover.maxColumnWidth;\r\n\r\n            const baseStyle = {\r\n                width: width,\r\n                height: this.props.height,\r\n                margin: index === 0\r\n                    ? `0px ${this.columnMover.marginRight}px 0px ${this.columnMover.marginRight}px`\r\n                    : `0px ${this.columnMover.marginRight}px 0px 0px`\r\n            };\r\n            return React.cloneElement(child,\r\n                {\r\n                    ...child.props,\r\n                    ...{\r\n                        style: {\r\n                            ...baseStyle,\r\n                        },\r\n                        transitioning,\r\n                        peekColumn: index === this.columnMover.peekIndex,\r\n                        column: this.columnMover,\r\n                    },\r\n                })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.wrapperRef} className=\"miller\">\r\n                <div ref={this.innerWrapper} className=\"wrapper\">\r\n                    {this.state.children}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nMillerColumn.propTypes = {\r\n    maxColumn: PropTypes.number.isRequired,\r\n    columnMagin: PropTypes.number.isRequired,\r\n    minColumnWidth: PropTypes.number.isRequired,\r\n    peekWidth: PropTypes.number.isRequired,\r\n    animationSpeed: PropTypes.number\r\n}\r\n\r\nMillerColumn.defaultProps = {\r\n    animationSpeed: 200,\r\n}\r\n\r\nexport default MillerColumn;","import React, { Component } from 'react';\r\n\r\nclass Column extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.getChildren = this.getChildren.bind(this);\r\n    }\r\n\r\n    getChildren() {\r\n        const { children, style, ...others } = this.props;\r\n        const { style: childrenStyle, ...otherChildrenProps } = children.props;\r\n        return React.cloneElement(children, { style: childrenStyle, ...otherChildrenProps, ...others });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={this.props.style} className=\"column\">\r\n                {this.getChildren()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Column;","const sampleTree = {\r\n  children: [\r\n    {\r\n      label: '1',\r\n      children: [{\r\n        label: '1-1',\r\n        children: [],\r\n      }, {\r\n        label: '1-2',\r\n        children: [{\r\n          label: '1-2-1',\r\n          children: [{\r\n            label: '1-2-1-1',\r\n            children: [],\r\n          }, {\r\n            label: '1-2-1-2',\r\n            children: [],\r\n          }, {\r\n            label: '1-2-1-3',\r\n            children: [],\r\n          }, {\r\n            label: '1-2-1-4',\r\n            children: [],\r\n          }],\r\n        }],\r\n      },],\r\n    },\r\n    {\r\n      label: '2',\r\n      children: [{\r\n        label: '2-1',\r\n        children: [{\r\n          label: '2-1-1',\r\n          children: [],\r\n        },],\r\n      }, {\r\n        label: '2-2',\r\n        children: [],\r\n      }],\r\n    },\r\n    {\r\n      label: '3',\r\n      children: [{\r\n        label: '3-1',\r\n        children: [{\r\n          label: '3-1-1',\r\n          children: [{\r\n            label: '3-1-1-1',\r\n            children: [{\r\n              label: '3-1-1-1-1',\r\n              children: [],\r\n            },],\r\n          },],\r\n        },],\r\n      },],\r\n    },\r\n    {\r\n      label: '4',\r\n      children: [\r\n        {\r\n          label: '4-1',\r\n          children: [{\r\n            label: '4-1-1',\r\n            children: [],\r\n          }],\r\n        },\r\n        {\r\n          label: '4-2',\r\n          children: [],\r\n        },\r\n        {\r\n          label: '4-3',\r\n          children: [],\r\n        }\r\n      ],\r\n    },\r\n    {\r\n      label: '5',\r\n      children: [\r\n        {\r\n          label: '5-1',\r\n          children: [{\r\n            label: '5-1-1',\r\n            children: [],\r\n          }],\r\n        },\r\n        {\r\n          label: '5-2',\r\n          children: [],\r\n        },\r\n        {\r\n          label: '5-3',\r\n          children: [{\r\n            label: '5-3-1',\r\n            children: [],\r\n          },\r\n          {\r\n            label: '5-3-2',\r\n            children: [],\r\n          }],\r\n        }\r\n      ],\r\n    }\r\n  ],\r\n}\r\n\r\nexport default sampleTree;","class SampleTree {\r\n    constructor(tree = {}, parent) {\r\n      this.label = tree.label;\r\n      this.parent = !tree.label ? null : parent.label;\r\n      this.children = Array.isArray(tree.children)\r\n        ? tree.children.map(t => new SampleTree(t, this))\r\n        : [];\r\n      this.selectedChild = null;\r\n    }\r\n  \r\n    get IsParentNode() {\r\n      return !this.label && !this.parent;\r\n    }\r\n  \r\n    IsNodeInChildren(label = this.selectedChild) {\r\n      return this.children.find(child => child.label === label);\r\n    }\r\n  \r\n    get NextNode() {\r\n      return this.IsNodeInChildren();\r\n    }\r\n  \r\n    UnsetSelected() {\r\n      const localSelectedChild = this.selectedChild;\r\n      if (localSelectedChild) {\r\n        this.selectedChild = null;\r\n        this.IsNodeInChildren(localSelectedChild).UnsetSelected();\r\n      }\r\n    }\r\n  \r\n    FindAndSetSelected(label) {\r\n      if (this.IsNodeInChildren(label)) {\r\n        this.IsNodeInChildren(label).UnsetSelected();\r\n        this.selectedChild = label;\r\n      } else if (this.selectedChild) {\r\n        this.NextNode.FindAndSetSelected(label);\r\n      }\r\n    }\r\n  }\r\n\r\n  export default SampleTree;\r\n  ","import React from 'react';\r\n\r\nconst getStyle = (showBg) => {\r\n    return {\r\n        transition: 'background 200ms',\r\n        background: showBg\r\n            ? '#bae6f9'\r\n            : '',\r\n        height: '500px',\r\n        border: '1px solid salmon',\r\n        borderRadius: '5px',\r\n        display: 'flex',\r\n        fontSize: '14px',\r\n        flexDirection: 'column',\r\n    }\r\n}\r\n\r\nconst Row = (props) => {\r\n    return (\r\n        <div onClick={() => props.peekColumn && props.onRowClick(\r\n            props.tree.selectedChild || props.tree.label,\r\n        )}\r\n            style={getStyle(props.peekColumn && !props.transitioning)}>\r\n            {\r\n                props.tree.children.length\r\n                    ? props.tree.children.map(i => {\r\n                        return <div\r\n                            onClick={() => !props.peekColumn && props.onRowClick(i.label)}\r\n                            className=\"clickable\"\r\n                            style={{\r\n                                padding: '20px',\r\n                                background: i.label === props.tree.selectedChild\r\n                                    ? 'salmon'\r\n                                    : ''\r\n                            }} key={i.label}>{i.label}</div>\r\n                    })\r\n                    : <div style={{ marginTop: '20px' }}>Empty</div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Row;","import React from 'react';\r\nimport './App.css';\r\nimport { MillerColumns, Column } from './MillerColumns';\r\nimport sampleTree from './sample/sampleTree';\r\nimport Model from './sample/model';\r\nimport Row from './sample/Row';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tree: new Model(sampleTree)\r\n    }\r\n    this.onRowClick = this.onRowClick.bind(this);\r\n  }\r\n\r\n  onRowClick(label) {\r\n    this.state.tree.FindAndSetSelected(label);\r\n    this.setState({\r\n      tree: this.state.tree,\r\n    })\r\n  }\r\n\r\n  getColumn(tree, index) {\r\n    return (\r\n      <Column key={index}>\r\n        <Row\r\n          onRowClick={this.onRowClick}\r\n          tree={tree} />\r\n      </Column>)\r\n  }\r\n\r\n  getColumns(tree, columns = [], localIndex = 0) {\r\n    let index = localIndex || 0;\r\n    columns.push(this.getColumn(tree, index));\r\n    if (!tree.selectedChild) return columns;\r\n    return this.getColumns(tree.NextNode, columns, ++localIndex);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ marginTop: '50px' }} className=\"App\">\r\n        <MillerColumns\r\n          maxColumn={4}\r\n          minColumnWidth={150}\r\n          columnMagin={35}\r\n          peekWidth={35}\r\n        >\r\n          {\r\n            this.getColumns(this.state.tree)\r\n          }\r\n        </MillerColumns>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}